Question  : https://www.hackerrank.com/challenges/bfsshortreach/problem
Level	  : Medium
Submission: https://www.hackerrank.com/challenges/bfsshortreach/submissions/code/197131067

Solution-


import math
import os
import random
import re
import sys
from collections import deque
from collections import defaultdict
def bfs(n, m, edges, s,graph):
    
    dist = [0 for i in range(n+1)]
    visited = [0]*(n+1)
    q = deque()
   
    q.append(s)
   
    while(q):
        node = q.popleft()
        for nb in graph[node]:
            if(not visited[nb]):
                #print("Running for {0} in {1}".format(nb, node))
                q.append(nb)
                visited[nb] = 1
                dist[nb] = dist[node]+6
                #print(*dist)
    for i in range(len(dist)):
        if(dist[i]==0):
            dist[i]=-1
    dist.pop(s)
    return dist[1:]
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    q = int(input())

    for q_itr in range(q):
        nm = input().split()

        n = int(nm[0])

        m = int(nm[1])

        edges = []
        graph = defaultdict(list)
        for i in range(m):
            edges.append(list(map(int, input().rstrip().split())))
            graph[edges[-1][0]].append(edges[-1][1])
            graph[edges[-1][1]].append(edges[-1][0])
        s = int(input())
        result = bfs(n, m, edges, s,graph)

        fptr.write(' '.join(map(str, result)))
        fptr.write('\n')

    fptr.close()
